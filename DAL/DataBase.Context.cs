//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class HMErpEntities : DbContext
    {
        public HMErpEntities()
            : base("name=HMErpEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<C_JobVibrationHtml> C_JobVibrationHtml { get; set; }
        public virtual DbSet<C_JobVibrationNewJob> C_JobVibrationNewJob { get; set; }
        public virtual DbSet<C_JobVibrationNewMachine> C_JobVibrationNewMachine { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Employee> Employee { get; set; }
        public virtual DbSet<Job> Job { get; set; }
        public virtual DbSet<JobVibration> JobVibration { get; set; }
        public virtual DbSet<JobVibrationMachine> JobVibrationMachine { get; set; }
        public virtual DbSet<JobVibrationMachinePointResult> JobVibrationMachinePointResult { get; set; }
        public virtual DbSet<LangString> LangString { get; set; }
        public virtual DbSet<LastUpdate> LastUpdate { get; set; }
        public virtual DbSet<Machine> Machine { get; set; }
        public virtual DbSet<MachinePoint> MachinePoint { get; set; }
        public virtual DbSet<Request> Request { get; set; }
        public virtual DbSet<User> User { get; set; }
        public virtual DbSet<vwClientTree> vwClientTree { get; set; }
        public virtual DbSet<vwClientMachineCountHtmlImport> vwClientMachineCountHtmlImport { get; set; }
        public virtual DbSet<vwCureentVbSts> vwCureentVbSts { get; set; }
        public virtual DbSet<vwCureentVbSts_a> vwCureentVbSts_a { get; set; }
        public virtual DbSet<vwCureentVbSts_b> vwCureentVbSts_b { get; set; }
        public virtual DbSet<vwJob> vwJob { get; set; }
        public virtual DbSet<vwJobVibration> vwJobVibration { get; set; }
        public virtual DbSet<vwJobVibrationGetPointAndStatus> vwJobVibrationGetPointAndStatus { get; set; }
        public virtual DbSet<vwJobVibrationIndex> vwJobVibrationIndex { get; set; }
        public virtual DbSet<vwJobVibrationMachine> vwJobVibrationMachine { get; set; }
        public virtual DbSet<vwJobVibrationMachineLastStatus> vwJobVibrationMachineLastStatus { get; set; }
        public virtual DbSet<vwJobVibrationMachinePointLastStatus> vwJobVibrationMachinePointLastStatus { get; set; }
        public virtual DbSet<vwJobVibrationReport> vwJobVibrationReport { get; set; }
        public virtual DbSet<vwVelDemod> vwVelDemod { get; set; }
        public virtual DbSet<PickList> PickList { get; set; }
        public virtual DbSet<EmployeeRole> EmployeeRole { get; set; }
        public virtual DbSet<Branch> Branch { get; set; }
        public virtual DbSet<JobRefubrishStep> JobRefubrishStep { get; set; }
        public virtual DbSet<ContactInfo> ContactInfo { get; set; }
        public virtual DbSet<JobRefubrish_Part> JobRefubrish_Part { get; set; }
        public virtual DbSet<JobRefubrish_Step> JobRefubrish_Step { get; set; }
        public virtual DbSet<MachinePart> MachinePart { get; set; }
        public virtual DbSet<DynamicGroup> DynamicGroup { get; set; }
        public virtual DbSet<FieldPool> FieldPool { get; set; }
        public virtual DbSet<JobRefubrish_StepField> JobRefubrish_StepField { get; set; }
        public virtual DbSet<MachineTypeStep> MachineTypeStep { get; set; }
        public virtual DbSet<MachinePart_TechField> MachinePart_TechField { get; set; }
        public virtual DbSet<DynamicGroupField> DynamicGroupField { get; set; }
        public virtual DbSet<SupplierProduct> SupplierProduct { get; set; }
        public virtual DbSet<CatalogItem> CatalogItem { get; set; }
        public virtual DbSet<CatalogItemComponent> CatalogItemComponent { get; set; }
        public virtual DbSet<Role> Role { get; set; }
        public virtual DbSet<vwCatalogItemComponent> vwCatalogItemComponent { get; set; }
        public virtual DbSet<JobTemplateNotes> JobTemplateNotes { get; set; }
        public virtual DbSet<Quote> Quote { get; set; }
        public virtual DbSet<QuoteVersion> QuoteVersion { get; set; }
        public virtual DbSet<JobAlignmentPart> JobAlignmentPart { get; set; }
        public virtual DbSet<JobAlignment> JobAlignment { get; set; }
        public virtual DbSet<QuoteTalk> QuoteTalk { get; set; }
        public virtual DbSet<QuoteVersionItem> QuoteVersionItem { get; set; }
        public virtual DbSet<BugLog> BugLog { get; set; }
        public virtual DbSet<vwQuoteReport> vwQuoteReport { get; set; }
        public virtual DbSet<vwRefubrishReport> vwRefubrishReport { get; set; }
        public virtual DbSet<EmployeeLog> EmployeeLog { get; set; }
        public virtual DbSet<JobOutside> JobOutside { get; set; }
        public virtual DbSet<JobTask> JobTask { get; set; }
        public virtual DbSet<JobTaskEmployee> JobTaskEmployee { get; set; }
        public virtual DbSet<Equipment> Equipment { get; set; }
        public virtual DbSet<JobEquipment> JobEquipment { get; set; }
        public virtual DbSet<Equipment_TechField> Equipment_TechField { get; set; }
        public virtual DbSet<JobRefubrish> JobRefubrish { get; set; }
        public virtual DbSet<JobTaskGroup> JobTaskGroup { get; set; }
        public virtual DbSet<JobTaskGroupField> JobTaskGroupField { get; set; }
        public virtual DbSet<BankField> BankField { get; set; }
        public virtual DbSet<BankTask> BankTask { get; set; }
        public virtual DbSet<BankTask_Field> BankTask_Field { get; set; }
    
        public virtual int spClientDelete(Nullable<int> client)
        {
            var clientParameter = client.HasValue ?
                new ObjectParameter("Client", client) :
                new ObjectParameter("Client", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spClientDelete", clientParameter);
        }
    
        public virtual int spDeleteTempTables()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spDeleteTempTables");
        }
    
        public virtual int spJobDelete(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobDelete", jobIDParameter);
        }
    
        public virtual int spJobVibrationDelete(Nullable<int> jobID)
        {
            var jobIDParameter = jobID.HasValue ?
                new ObjectParameter("JobID", jobID) :
                new ObjectParameter("JobID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobVibrationDelete", jobIDParameter);
        }
    
        public virtual int spJobVibrationNew(Nullable<int> clientID)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobVibrationNew", clientIDParameter);
        }
    
        public virtual int spJobVibrationNewJob()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobVibrationNewJob");
        }
    
        public virtual int spJobVibrationNewJobInsert(Nullable<int> clientID, string startDate)
        {
            var clientIDParameter = clientID.HasValue ?
                new ObjectParameter("ClientID", clientID) :
                new ObjectParameter("ClientID", typeof(int));
    
            var startDateParameter = startDate != null ?
                new ObjectParameter("StartDate", startDate) :
                new ObjectParameter("StartDate", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobVibrationNewJobInsert", clientIDParameter, startDateParameter);
        }
    
        public virtual int spJobVibrationNewMachine()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spJobVibrationNewMachine");
        }
    
        public virtual int spMergeMachines(Nullable<int> oldMacID, Nullable<int> newMacID)
        {
            var oldMacIDParameter = oldMacID.HasValue ?
                new ObjectParameter("OldMacID", oldMacID) :
                new ObjectParameter("OldMacID", typeof(int));
    
            var newMacIDParameter = newMacID.HasValue ?
                new ObjectParameter("NewMacID", newMacID) :
                new ObjectParameter("NewMacID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("spMergeMachines", oldMacIDParameter, newMacIDParameter);
        }
    }
}
